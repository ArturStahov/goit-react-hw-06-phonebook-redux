{"version":3,"sources":["redux/contacts/contacts-action.js","redux/contacts/contact-reducer.js","redux/store.js","components/Section/StyledComponents.js","components/Section/Section.js","components/PhoneForm/StyledComponents.js","components/ContactList/contactList-selector.js","components/PhoneForm/PhoneForm.js","Notification/ErrorNotification.js","components/FilterContacts/filter-selector.js","components/ContactList/StyledComponents.js","components/ContactList/ContactList.js","components/FilterContacts/StyledComponents.js","components/FilterContacts/FilterContacts.js","App.js","index.js"],"names":["addItem","createAction","name","number","payload","id","uniqid","deleteItem","changeFilter","itemsReducer","createReducer","action","state","filter","item","filterReducer","contactsReducer","combineReducers","items","persistConfig","key","storage","blacklist","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contacts","persistReducer","devTools","process","persistor","persistStore","Section","styled","section","Title","h2","SectionBlock","title","children","Form","form","FormLabel","label","Button","button","itemsArray","PhoneForm","useState","nameValue","setNameValue","numberValue","setNumberValue","useSelector","dispatch","useDispatch","handlerInput","e","target","value","onSubmit","preventDefault","some","toLowerCase","includes","error","text","delay","isMobilePhone","type","onChange","required","placeholder","minLength","maxLength","filterValue","TaskList","ul","TaskItem","li","TaskItemElements","p","ContactList","contactsArray","arrFilters","map","onClick","FilterBlock","div","Label","Input","input","FilterContacts","event","App","AppRender","loading","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.7afaf2e2.chunk.js","sourcesContent":["import uniqid from 'uniqid';\nimport { createAction } from '@reduxjs/toolkit';\n\nexport const addItem = createAction('contacts/add', (name, number) => {\n  return {\n    payload: {\n      id: uniqid(),\n      name,\n      number,\n    },\n  };\n});\n\nexport const deleteItem = createAction('contacts/delete');\n\nexport const changeFilter = createAction('filter/change');\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport * as action from './contacts-action';\n\nconst itemsReducer = createReducer([], {\n  [action.addItem]: (state, { payload }) => [...state, payload],\n  [action.deleteItem]: (state, { payload }) =>\n    state.filter(item => item.id !== payload),\n});\n\nconst filterReducer = createReducer('', {\n  [action.changeFilter]: (state, { payload }) => payload,\n});\n\nconst contactsReducer = combineReducers({\n  items: itemsReducer,\n  filter: filterReducer,\n});\n\nexport default contactsReducer;\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\nimport storage from 'redux-persist/lib/storage';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport contactsReducer from './contacts/contact-reducer';\n\nconst persistConfig = {\n  key: 'save-contacts',\n  storage,\n  blacklist: ['filter'],\n};\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\nconst store = configureStore({\n  reducer: {\n    contacts: persistReducer(persistConfig, contactsReducer),\n  },\n  devTools: process.env.NODE_ENV === 'development',\n  middleware,\n});\n\nconst persistor = persistStore(store);\n\nexport default { store, persistor };\n\n/** state template\n * {\n *   contacts: {\n *       items: [],\n *           filter: ''\n *   }\n * }\n */\n","import styled from 'styled-components';\n\nconst Section = styled.section`\n  padding: 20px 0px 20px;\n  max-width: 600px;\n  margin: 0 auto;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n`;\nconst Title = styled.h2`\n  width: 100%;\n  text-align: center;\n  font-size: 1rem;\n  color: green;\n  font-weight: 600;\n  text-transform: uppercase;\n  margin-bottom: 20px;\n`;\nexport { Section, Title };\n","import React from 'react';\nimport { Section, Title } from './StyledComponents';\nimport PropTypes from 'prop-types';\n\nexport default function SectionBlock({ title, children }) {\n  return (\n    <Section>\n      <Title>{title}</Title>\n      {children}\n    </Section>\n  );\n}\n\nSectionBlock.propTypes = {\n  title: PropTypes.string,\n};\n","import styled from 'styled-components';\n\nconst Form = styled.form`\n  max-width: 100%;\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n`;\nconst FormLabel = styled.label`\n  width: 85%;\n  margin-bottom: 10px;\n  display: flex;\n  justify-content: space-around;\n`;\nconst Button = styled.button`\n  padding: 5px 10px;\n  max-width: 250px;\n  height: 40px;\n  background-color: green;\n  border: none;\n  border-radius: 0.5rem;\n  cursor: pointer;\n`;\n\nexport { Form, FormLabel, Button };\n","export const itemsArray = state => state.contacts.items;\n","import { useState } from 'react';\nimport isMobilePhone from 'validator/es/lib/isMobilePhone';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Form, FormLabel, Button } from './StyledComponents';\nimport {\n  errorBadValueNumber,\n  errorContactPresent,\n} from '../../Notification/ErrorNotification';\nimport { itemsArray } from '../ContactList/contactList-selector';\nimport { addItem } from '../../redux/contacts/contacts-action';\n\nexport default function PhoneForm() {\n  const [nameValue, setNameValue] = useState('');\n  const [numberValue, setNumberValue] = useState('');\n\n  const contacts = useSelector(itemsArray);\n  const dispatch = useDispatch();\n\n  const handlerInput = e => {\n    const { name, value } = e.target;\n\n    switch (name) {\n      case 'nameValue':\n        setNameValue(value);\n        break;\n      case 'numberValue':\n        setNumberValue(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handlerFormSubmit = e => {\n    e.preventDefault();\n\n    let isContactPresent = contacts.some(item =>\n      item.name.toLowerCase().includes(nameValue.toLowerCase()),\n    );\n\n    if (isContactPresent) {\n      errorContactPresent();\n      return;\n    }\n    if (!isMobilePhone(numberValue)) {\n      errorBadValueNumber();\n      return;\n    }\n\n    dispatch(addItem(nameValue, numberValue));\n\n    setNameValue('');\n    setNumberValue('');\n  };\n\n  return (\n    <Form onSubmit={handlerFormSubmit}>\n      <FormLabel>\n        Name:\n        <input\n          type=\"text\"\n          name=\"nameValue\"\n          onChange={handlerInput}\n          value={nameValue}\n          required\n        />\n      </FormLabel>\n      <FormLabel>\n        Phone:\n        <input\n          type=\"text\"\n          name=\"numberValue\"\n          onChange={handlerInput}\n          value={numberValue}\n          placeholder=\"+3(___)___-__-__\"\n          minLength=\"13\"\n          maxLength=\"13\"\n          required\n        />\n      </FormLabel>\n      <Button type=\"submit\">Add Contact</Button>\n    </Form>\n  );\n}\n","import { error } from '@pnotify/core';\nimport '@pnotify/core/dist/PNotify.css';\nimport '@pnotify/core/dist/BrightTheme.css';\nimport '@pnotify/confirm/dist/PNotifyConfirm.css';\n\nconst errorBadValueNumber = () => {\n  return error({\n    title: 'Hi!',\n    text:\n      'BAD value phone-number!!! You must enter phone-number correct format',\n    delay: 3000,\n  });\n};\n\nconst errorContactPresent = () => {\n  return error({\n    title: 'Hi!',\n    text: 'This contact is present in phone-book!',\n    delay: 3000,\n  });\n};\n\nexport { errorBadValueNumber, errorContactPresent };\n","export const filterValue = state => state.contacts.filter;\n","import styled from 'styled-components';\n\nconst TaskList = styled.ul`\n  max-width: 700px;\n  margin: 0 auto;\n`;\nconst TaskItem = styled.li`\n  padding: 10px 10px 10px 10px;\n  width: 100%;\n  display: flex;\n  justify-content: space-between;\n  background-color: grey;\n  border: 2px solid black;\n  border-radius: 0.5rem;\n  margin-bottom: 10px;\n  box-shadow: 10px 5px 5px grey;\n`;\nconst TaskItemElements = styled.p`\n  &:not(:last-child) {\n    margin-right: 10px;\n  }\n`;\nconst Button = styled.button`\n  padding: 5px 10px;\n  max-width: 200px;\n  height: 30px;\n  background-color: goldenrod;\n  border: none;\n  border-radius: 0.5rem;\n  font-size: 0.8rem;\n  color: #fff;\n  text-transform: uppercase;\n  cursor: pointer;\n`;\nexport { TaskList, TaskItem, TaskItemElements, Button };\n","import PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteItem } from '../../redux/contacts/contacts-action';\nimport { itemsArray } from './contactList-selector';\nimport { filterValue } from '../FilterContacts/filter-selector';\n\nimport {\n  TaskList,\n  TaskItem,\n  TaskItemElements,\n  Button,\n} from './StyledComponents';\n\nexport default function ContactList() {\n  const contactsArray = useSelector(itemsArray);\n  const filter = useSelector(filterValue);\n  const filterContacts = items => {\n    return items.filter(item =>\n      item.name.toLowerCase().includes(filter.toLowerCase()),\n    );\n  };\n  const arrFilters = filterContacts(contactsArray);\n\n  const dispatch = useDispatch();\n\n  return (\n    <TaskList>\n      {arrFilters.map(({ id, name, number }) => (\n        <TaskItem key={id}>\n          <TaskItemElements>{name} :</TaskItemElements>\n          <TaskItemElements>{number}</TaskItemElements>\n          <Button type=\"button\" onClick={() => dispatch(deleteItem(id))}>\n            Delete\n          </Button>\n        </TaskItem>\n      ))}\n    </TaskList>\n  );\n}\n\nContactList.propTypes = {\n  visibleContacts: PropTypes.array.isRequired,\n  onDeleteContact: PropTypes.func,\n};\n","import styled from 'styled-components';\n\nconst FilterBlock = styled.div`\n  width: 100%;\n  padding-bottom: 20px;\n`;\nconst Label = styled.label`\n  width: 100%;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n`;\nconst Title = styled.p`\n  width: 100%;\n  text-align: center;\n  margin-bottom: 5px;\n`;\nconst Input = styled.input`\n  width: 50%;\n`;\n\nexport { FilterBlock, Label, Title, Input };\n","import PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { FilterBlock, Label, Title, Input } from './StyledComponents';\nimport { changeFilter } from '../../redux/contacts/contacts-action';\nimport { filterValue } from './filter-selector';\n\nexport default function FilterContacts() {\n  const value = useSelector(filterValue);\n  const dispatch = useDispatch();\n\n  return (\n    <FilterBlock>\n      <Label>\n        <Title>Find Contacts by name</Title>\n        <Input\n          type=\"text\"\n          value={value}\n          onChange={event => dispatch(changeFilter(event.target.value))}\n        />\n      </Label>\n    </FilterBlock>\n  );\n}\n\nFilterContacts.propTypes = {\n  OnInputFilter: PropTypes.func,\n  value: PropTypes.string,\n};\n","import SectionBlock from './components/Section';\nimport PhoneForm from './components/PhoneForm';\nimport ContactsList from './components/ContactList';\nimport FilterContacts from './components/FilterContacts';\n\n// сделать сохранение в локал сторадж через редакс\nexport default function App() {\n  return (\n    <>\n      <SectionBlock title=\"Phone-book\">\n        <PhoneForm />\n      </SectionBlock>\n      <SectionBlock title=\"Contacts\">\n        <FilterContacts />\n\n        <ContactsList />\n      </SectionBlock>\n    </>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '@csstools/normalize.css';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport './base.css';\nimport App from './App';\n\nfunction AppRender() {\n  return (\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  );\n}\n\nReactDOM.render(<AppRender />, document.querySelector('#root'));\n"],"sourceRoot":""}